import subprocessimport sysimport osimport timeimport requestsfrom urllib.parse import urlparsedef container_exists(name):    try:        result = subprocess.run(            ["docker", "ps", "-a", "--format", "{{.Names}}"],            capture_output=True,            text=True,            check=True        )        containers = result.stdout.strip().split("\n")        return name in containers    except subprocess.CalledProcessError as e:        print(f"Error checking container existence: {e}")        return Falsedef stop_and_remove_container(name):    print(f"Stopping and removing existing container {name}...")    try:        subprocess.run(["docker", "stop", name], check=True, capture_output=True)        subprocess.run(["docker", "rm", name], check=True, capture_output=True)        print(f"Container {name} stopped and removed.")    except subprocess.CalledProcessError as e:        print(f"Error stopping/removing container: {e}")def create_directories(data_dir):    """Create necessary directories for NiFi data persistence"""    directories = [        "conf", "database_repository", "flowfile_repository",         "content_repository", "provenance_repository", "certs"    ]        for directory in directories:        path = os.path.join(data_dir, directory)        os.makedirs(path, exist_ok=True)        print(f"Created data directories in {data_dir}")def validate_ngrok_url(url):    """Validate and format ngrok URL"""    if not url.startswith(('http://', 'https://')):        url = 'https://' + url        parsed = urlparse(url)    if not parsed.netloc:        raise ValueError("Invalid ngrok URL format")        return urldef start_container(ngrok_url, container_name, image_name, data_dir):    print(f"Starting NiFi container with ngrok URL: {ngrok_url}")        # Validate and format ngrok URL    try:        formatted_url = validate_ngrok_url(ngrok_url)        parsed_url = urlparse(formatted_url)        # For NiFi proxy host, we need: ngrok-domain:8443 (the port NiFi is listening on)        proxy_host = f"{parsed_url.netloc}:8443"    except ValueError as e:        print(f"Error with ngrok URL: {e}")        sys.exit(1)        # Create data directories if they don't exist    create_directories(data_dir)        # Convert Windows paths to Unix-style for Docker volumes    def to_docker_path(windows_path):        # Convert Windows path to Docker-compatible format        return windows_path.replace('\\', '/')        volumes = [        f"{to_docker_path(os.path.join(data_dir, 'conf'))}:/opt/nifi/nifi-current/conf",        f"{to_docker_path(os.path.join(data_dir, 'database_repository'))}:/opt/nifi/nifi-current/database_repository",        f"{to_docker_path(os.path.join(data_dir, 'flowfile_repository'))}:/opt/nifi/nifi-current/flowfile_repository",        f"{to_docker_path(os.path.join(data_dir, 'content_repository'))}:/opt/nifi/nifi-current/content_repository",        f"{to_docker_path(os.path.join(data_dir, 'provenance_repository'))}:/opt/nifi/nifi-current/provenance_repository",        f"{to_docker_path(os.path.join(data_dir, 'certs'))}:/opt/nifi/nifi-current/certs",        f"{to_docker_path(os.path.join(data_dir, 'lib'))}:/opt/nifi/nifi-current/lib",    ]        volume_args = []    for vol in volumes:        volume_args.extend(["-v", vol])        cmd = [        "docker", "run", "-d",        "--name", container_name,        "-p", "8443:8443",        "-e", "NIFI_JVM_HEAP_INIT=1g",        "-e", "NIFI_JVM_HEAP_MAX=2g",    ] + volume_args + [image_name]        try:        subprocess.run(cmd, check=True)        print("NiFi container started successfully.")    except subprocess.CalledProcessError as e:        print(f"Error starting container: {e}")        sys.exit(1)def wait_for_nifi(container_name, max_attempts=30):    """Wait for NiFi to be ready"""    print("Waiting for NiFi to start...")        for attempt in range(max_attempts):        try:            # Check if the process is running inside the container            result = subprocess.run([                "docker", "exec", container_name,                "pgrep", "-f", "java.*nifi"            ], capture_output=True, text=True)                        if result.returncode == 0:                print("NiFi process is running.")                # Give it a few more seconds to fully initialize                time.sleep(10)                return True                    except subprocess.CalledProcessError:            pass                print(f"Attempt {attempt + 1}/{max_attempts}: NiFi not ready yet...")        time.sleep(10)        print("Warning: NiFi may not be fully ready, but proceeding...")    return Falsedef set_proxy_host(container_name, proxy_host):    """Set the proxy host in nifi.properties"""    print(f"Setting proxy host to: {proxy_host}")        try:        cmd = [            "docker", "exec", container_name,            "sed", "-i",             f"s|^nifi.web.proxy.host=.*|nifi.web.proxy.host={proxy_host}|",            "/opt/nifi/nifi-current/conf/nifi.properties"        ]        subprocess.run(cmd, check=True, capture_output=True, text=True)        print("Proxy host set successfully.")    except subprocess.CalledProcessError as e:        print(f"Error setting proxy host: {e}")def set_single_user_credentials(container_name, username, password):    print(f"Setting single user credentials: {username}")        try:        cmd = [            "docker", "exec", container_name,            "./bin/nifi.sh", "set-single-user-credentials", username, password        ]        result = subprocess.run(cmd, check=True, capture_output=True, text=True)        print("Single user credentials set successfully.")        print("Note: You may need to restart the container for changes to take effect.")    except subprocess.CalledProcessError as e:        print(f"Error setting credentials: {e}")        print(f"Error output: {e.stderr}")def main():    if len(sys.argv) != 2:        print(f"Usage: {sys.argv[0]} <ngrok-url>")        print("Example: python start_nifi.py abc123.ngrok.io")        print("         python start_nifi.py https://abc123.ngrok.io")        sys.exit(1)        ngrok_url = sys.argv[1]    container_name = "nifi_container"    image_name = "test-nifi"    data_dir = os.path.abspath("nifi_data")    nifi_username = "admin"    nifi_password = "clankergetoutofmyyard"        print(f"Starting NiFi setup...")    print(f"Container: {container_name}")    print(f"Image: {image_name}")    print(f"Data directory: {data_dir}")    print(f"Ngrok URL: {ngrok_url}")        # Stop and remove existing container if it exists    if container_exists(container_name):        stop_and_remove_container(container_name)        # Start the container    start_container(ngrok_url, container_name, image_name, data_dir)        # Wait for NiFi to start    wait_for_nifi(container_name)        # Set proxy host    formatted_url = validate_ngrok_url(ngrok_url)    parsed_url = urlparse(formatted_url)    # NiFi proxy host format: ngrok-domain:8443    proxy_host = f"{parsed_url.netloc}:8443"    set_proxy_host(container_name, proxy_host)        # Set credentials    set_single_user_credentials(container_name, nifi_username, nifi_password)        print("\n" + "="*50)    print("NiFi Setup Complete!")    print("="*50)    print(f"Access URL: https://{ngrok_url}")    print(f"Username: {nifi_username}")    print(f"Password: {nifi_password}")    print("\nNote: Your friends should access the HTTPS URL.")    print("If you encounter certificate warnings, it's safe to proceed.")    print("="*50)if __name__ == "__main__":    main()